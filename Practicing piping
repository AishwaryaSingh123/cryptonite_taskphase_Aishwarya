#Practicing Piping

##Redirecting Output
 To redirect standard output to files.
###THOUGHT PROCESS: 
In this challenge, I needed to use input redirection to write the word "PWN" (in uppercase) to a file named "COLLEGE" (also in uppercase).
###SOLUTION:
'''
echo PWN > COLLEGE
'''

##Redirecting more output
Run /challenge/run while redirecting the output to myflag file
###Thought process
 I needed to redirect the output of /challenge/run to the file myflag using >. Then check contents in myflag.
###Solution
'''
/challenge/run > myflag
cat myflag
'''

##Appending Output
 To aggregate outputs from multiple commands into the same file without overwriting it but appending it.
###Thought process:
I needed to run /challenge/run and redirect its output in append mode to the file /home/hacker/the-flag.
This practice would write the first half of the flag to the file and the second half to stdout if stdout is redirected to the file.
###Solution:
'''
/challenge/run >> ~/the-flag
cat ~/the-flag
'''

##Redirecting errors
 I need to redirect the output of /challenge/run to myflag, while sending the "errors" (which are the instructions) to instructions.
###Thought process
I needed to run /challenge/run with an append-mode redirect to the file /home/hacker/the-flag.
This setup would write the first half of the flag directly to the file and the second half to stdout if redirected correctly.
###Solutions:
'''
/challenge/run >> ~/the-flag
cat ~/the-flag

'''

##Redirecting inputs
I need to redirect the PWN file to it, ensuring that the PWN file contains the value "COLLEGE."
###Thought process
 In this challenge, I needed to redirect the output of /challenge/run to myflag and the error messages (in this case, the instructions) to a file named instructions.
###Solutions
'''
/challenge/run 2> instructions
/challenge/run > myflag
/challenge/run > myflag 2> instructions
cat myflag
'''

##Grepping stored results
To prepare for more complex levels, I need to redirect the output of /challenge/run to /tmp/data.txt. This will create a hundred thousand lines of text, with one of those lines containing the flag. After that, Iâ€™ll use grep to search for the flag in /tmp/data.txt.
###Thought process
 In this level, the task was to redirect the output of /challenge/run to /tmp/data.txt. This command generates a large amount of text, including the flag, which I would then locate using grep.
###Solution
'''
/challenge/run > /tmp/data.txt
grep pwn.college /tmp/data.txt

'''

GREPPING LIVE OUTPUT
THOUGHT PROCESS: The goal was to use /challenge/run to generate a large amount of text and pipe that output directly into grep to find the flag.
Solutions:
/challenge/run | grep pwn.college

Grepping Errors
THOUGHT PROCESS: The objective was to run /challenge/run, which generates a lot of output, including errors. By combining stderr and stdout, I could grep through all output for the flag.

SOLUTION:
/challenge/run 2>&1 | grep pwn.college

Duplicating Piped Data with tee
THOUGHT PROCESS: I needed to pipe the output of /challenge/pwn into /challenge/college, but I also wanted to see what /challenge/pwn was outputting. Using tee, I could intercept the data and save it for reference.

SOLUTION:
/challenge/pwn | tee output | /challenge/college
cat output
/challenge/pwn --secret "4tfLWu_k" | /challenge/college


Writing to Multiple Programs
THOUGHT PROCESS: I needed to run the /challenge/hack command and duplicate its output as input to both the /challenge/the and /challenge/planet commands.

SOLUTION:
/challenge/hack | tee >(/challenge/the) | /challenge/planet


THOUGHT PROCESS:

I needed to send the stdout from /challenge/hack to /challenge/planet.Simultaneously, I needed to redirect the stderr from /challenge/hack to /challenge/the.I had to figure out how to do this without mixing the outputs.
SOLUTION:
/challenge/hack 2> >(/challenge/the) > >(/challenge/planet)
